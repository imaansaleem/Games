import numpy as np
import heapq


def isSolvable(start, goal):
    start_inversions = start.NumberOfInversions()
    goal_inversions = goal.NumberOfInversions()
    return start_inversions % 2 == goal_inversions % 2


class Puzzle:
    def __init__(self, parent_row, parent_col, empty_row, empty_col, integers):
        self.integers = np.zeros((3, 3), dtype=int)
        self.parentRow = parent_row
        self.parentCol = parent_col
        self.emptyRow = empty_row
        self.emptyCol = empty_col
        self.g_score = 0
        for i in range(3):
            for j in range(3):
                self.integers[i][j] = integers[i][j]

    def __lt__(self, other):
        return self.g_score < other.g_score

    def NumberOfInversions(self):
        # An inversion is when a number precedes another number with a lower value. We count the number of inversions in
        # the start state and the goal state. If the parity (odd or even) of the number of inversions is the same for
        # both states, then it is possible to reach the goal state from the start state.

        inversions = 0
        oneD = self.integers.flatten()
        for i in range(len(oneD)):
            for j in range(i + 1, len(oneD)):
                if oneD[i] > oneD[j] and oneD[j] != 0:
                    inversions += 1
        return inversions

    def printMatrix(self):
        print("+-------+")
        for i in range(3):
            print(f'| {self.integers[i][0]} {self.integers[i][1]} {self.integers[i][2]} |')
        print("+-------+")

    def getPosition(self, value):
        for i in range(3):
            for j in range(3):
                if self.integers[i][j] == value:
                    return i, j
        return -1, -1

    def move(self, row, col, newRow, newCol):
        p = Puzzle(row, col, newRow, newCol, self.integers)
        q = p.integers[newRow][newCol]
        p.integers[newRow][newCol] = p.integers[row][col]
        p.integers[row][col] = q
        return p

    def generate_successors(self):
        moves = []
        row, col = self.emptyRow, self.emptyCol

        if row > 0 and (row - 1 != self.parentRow or col != self.parentCol):
            moves.append(self.move(row, col, row - 1, col))  # check up

        if col < 2 and (row != self.parentRow or col + 1 != self.parentCol):
            moves.append(self.move(row, col, row, col + 1))  # check right

        if row < 2 and (row + 1 != self.parentRow or col != self.parentCol):
            moves.append(self.move(row, col, row + 1, col))  # check down

        if col > 0 and (row != self.parentRow or col - 1 != self.parentCol):
            moves.append(self.move(row, col, row, col - 1))  # check left

        return moves


def Astar(initial_state, goal_state):
    open_set = []
    came_from = []

    heapq.heappush(open_set, (calculate_heuristic(initial_state, goal_state), initial_state))
    while open_set:
        current_state = heapq.heappop(open_set)
        if np.array_equal(current_state[1].integers, goal_state.integers):
            return current_state[1], came_from
        for move in current_state[1].generate_successors():
            heapq.heappush(open_set, (calculate_heuristic(move, goal_state), move))
            came_from.append(current_state[1])  # Update the came_from dictionary


def calculate_heuristic(state, goal_state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state.integers[i][j] != 0:
                goal_index_row, goal_index_col = goal_state.getPosition(state.integers[i][j])
                if goal_index_row >= 0 and goal_index_col >= 0:
                    distance += abs(i - goal_index_row) + abs(j - goal_index_col)
    return distance


def isSolvable(start, goal):
    start_inversions = start.NumberOfInversions()
    goal_inversions = goal.NumberOfInversions()
    return start_inversions % 2 == goal_inversions % 2


def main():
    arr = np.array([[1, 2, 3], [4, 5, 6], [0, 7, 8]])
    start = Puzzle(-1, -1, 2, 0, arr)
    print("Start State: ")
    start.printMatrix()
    arr2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 0]])
    goal = Puzzle(-1, -1, 2, 2, arr2)

    if not isSolvable(start, goal):
        print("Solution not found")
    else:
        goal, came_from = Astar(start, goal)
        print("Goal")
        goal.printMatrix()
        print("Path")
        for value in came_from:
            value.printMatrix()
main()
